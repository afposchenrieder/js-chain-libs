"""
Workaround needed due to relay issue https://github.com/facebook/relay/issues/1880
"""
type Node {
  id: ID
}

interface Address {
  """
  The base32 representation of an address
  """
  id: String!
  delegation: Pool!
  transactions(
    first: Int
    last: Int
    before: IndexCursor
    after: IndexCursor
  ): TransactionConnection!
}

type BftLeader {
  id: String!
}

"""
A Block
"""
type Block {
  """
  The Block unique identifier
  """
  id: String!

  """
  Date the Block was included in the blockchain
  """
  date: BlockDate!

  """
  The transactions contained in the block
  """
  transactions(
    first: Int
    last: Int
    before: IndexCursor
    after: IndexCursor
  ): TransactionConnection!
  previousBlock: Block!
  chainLength: ChainLength!
  leader: Leader
}

type BlockConnection {
  pageInfo: PageInfo!
  edges: [BlockEdge!]!

  """
  A count of the total number of objects in this connection, ignoring pagination.
  """
  totalCount: BlockCount!
}

scalar BlockCount

"""
Block's date, composed of an Epoch and a Slot
"""
type BlockDate {
  epoch: Epoch!
  slot: Slot!
}

type BlockEdge {
  node: Block!

  """
  A cursor for use in pagination
  """
  cursor: IndexCursor!
}

union Certificate = StakeDelegation | OwnerStakeDelegation | PoolRegistration

scalar ChainLength

type Epoch {
  id: EpochNumber!

  """
  Not yet implemented
  """
  stakeDistribution: StakeDistribution!

  """
  Get a paginated view of all the blocks in this epoch
  """
  blocks(first: Int, last: Int, before: IndexCursor, after: IndexCursor): BlockConnection
  firstBlock: Block
  lastBlock: Block
  totalBlocks: BlockCount!
}

scalar EpochNumber

type FeeSettings {
  constant: Value!
  coefficient: Value!
  certificate: Value!
}

scalar IndexCursor

union Leader = Pool | BftLeader

type OwnerStakeDelegation {
  pool: Pool!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: IndexCursor
  endCursor: IndexCursor
}

type Pool {
  id: PoolId!
  blocks(first: Int, last: Int, before: IndexCursor, after: IndexCursor): BlockConnection!
}

scalar PoolId

type PoolRegistration {
  pool: Pool!

  """
  A random value, for user purpose similar to a UUID.
  it may not be unique over a blockchain, so shouldn't be used a unique identifier
  """
  serial: Serial!

  """
  Beginning of validity for this pool, this is used
  to keep track of the period of the expected key and the expiry
  """
  startValidity: TimeOffsetSeconds!

  """
  Management threshold for owners, this need to be <= #owners and > 0
  """
  managementThreshold: Int!

  """
  Owners of this pool
  """
  owners: [PublicKey!]!
}

type PoolStakeDistribution {
  pool: Pool!
  delegatedStake: Value!
}

scalar PublicKey

type Query {
  block(id: String!): Block!
  blockByChainLength(length: ChainLength!): Block

  """
  query all the blocks in a paginated view
  """
  allBlocks(first: Int, last: Int, before: IndexCursor, after: IndexCursor): BlockConnection!
  transaction(id: String!): Transaction!
  epoch(id: EpochNumber!): Epoch!
  address(bech32: String!): Address!
  stakePool(id: PoolId!): Pool!
  status: Status!
}

scalar Serial

scalar Slot

type StakeDelegation {
  account: Address!
  pool: Pool!
}

type StakeDistribution {
  pools: [PoolStakeDistribution!]!
}

type Status {
  currentEpoch: Epoch!
  latestBlock: Block!
  feeSettings: FeeSettings!
}

scalar TimeOffsetSeconds

"""
A transaction in the blockchain
"""
type Transaction {
  """
  The hash that identifies the transaction
  """
  id: String!

  """
  The block this transaction is in
  """
  block: Block!
  inputs: [TransactionInput!]!
  outputs: [TransactionOutput!]!
  certificate: Certificate
}

type TransactionConnection {
  pageInfo: PageInfo!
  edges: [TransactionEdge!]!

  """
  A count of the total number of objects in this connection, ignoring pagination.
  """
  totalCount: TransactionCount!
}

scalar TransactionCount

type TransactionEdge {
  node: Transaction!

  """
  A cursor for use in pagination
  """
  cursor: IndexCursor!
}

interface TransactionInput {
  amount: Value!
  address: Address!
}

type TransactionOutput {
  amount: Value!
  address: Address!
}

"""
Pocho types
"""
type AccountAddress implements Address {
  """
  The base32 representation of an address
  """
  id: String!
  delegation: Pool!
  transactions(
    first: Int
    last: Int
    before: IndexCursor
    after: IndexCursor
  ): TransactionConnection!
}

type UtxoAddress implements Address {
  """
  The base32 representation of an address
  """
  id: String!
  delegation: Pool!
  transactions(
    first: Int
    last: Int
    before: IndexCursor
    after: IndexCursor
  ): TransactionConnection!
  stakeKey: AccountAddress
}

type AccountTransactionInput implements TransactionInput {
  amount: Value!
  address: Address!
}

type UtxoTransactionInput implements TransactionInput {
  amount: Value!
  address: Address!
  spent: Boolean!
}

scalar Value
